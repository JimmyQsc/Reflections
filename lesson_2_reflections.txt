1. What happens when you initialize a repository?
Why do you need to do it?
It will create a .git subdirectory in the project
root, which contains all of the necessary metadata
for the repo.
run the git init command.
2. How is the staging area different from the working
directory and the repository? What value do you think
it offers?
Working directory is the folder you currently in, you
use git init to initialize a git repository, you add
files to the staging area so when you run the git commit
command, you only commit the files you've added to the
staging area.
it allows me to add changes to the staging area one by
one, and commit them when all the changes forms a logical
change.
3. How can you use the staging area to make sure you
have one commit per logical change?
Only those files on the staging area are commited using
the git commit command, so i can add the files to the staging
area one by one, and commit them when i see all the changes
forms a logical part.
3. What are some situations when branches would be helpful
in keeping your history organized? How would branches help?
when i wnant to add a experimental feature to the project,
but i want the current version to be functional and continue
to improve it, i can work on both branches without affect
one another.
4. How do the diagrams help you visualize the branch
structure?
The diagrams can show you the path of commit you've
made, its like a road map, you can fllow the foot print
to know where you are.
5. What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?
Merging two branches will create a new commit to the checked-
out branch, this commit contains all the changes from both
branches.
the merged commit will have two parents.
6. What are the pros and cons of Gitâ€™s automatic merging
vs. always doing merges manually?
Git's auromatic merge is very efficent and can save developer
a lot of time, for the most time it won't make mistakes. but it
can cause some miatake in some cases. for example, if one branch
deleted a function, and another branch added a call to that
function, Git would merge those together with no conflict
and the resulting code would be broken.


